/**
@var FLOOR
See @ref page_type_71
*/

/**
@page page_type_71 Floor


@section Description
    Floors are the base ground objects, which "defines" the tile.
    All settings for ground type and moving issues are done in the 
    floor tile.
    For floor tiles, we have 2 rules:
    a.) There must be a floor tile for every map position of a map.
    b.) Only ONE and exactly ONE floor tile per map position. 



Type defined by:
- @ref object::type = 71


@section Attributes

<table>
	<tr>
		<th>Attribute</th>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>anim speed</td>
		<td>@ref obj::anim_speed</td>
		<td>  How fast to play this animation.
		</td>
	</tr>
	<tr>
		<td>animation</td>
		<td>@ref obj::animation</td>
		<td>    The animation-name defines what animation is displayed for this object
    in-game. Note that a set animation will overrule the face.
    Changing animation is easy - adding or deleting a animation is more
    difficult and should be done in the text parse window and not in this
    dialog.
		</td>
	</tr>
	<tr>
		<td>block view</td>
		<td>@ref FLAG_BLOCKSVIEW</td>
		<td>    If an item is set to block view, players (and monsters) cannot
    see byond it unless they cross it or manage to stand ontop.
		</td>
	</tr>
	<tr>
		<td>blocking passage</td>
		<td>@ref obj::no_pass</td>
		<td>    If set, the object cannot be passed by players nor monsters.
		</td>
	</tr>
	<tr>
		<td>can reflect missiles</td>
		<td>@ref obj::can_reflect_missile</td>
		<td>   object CAN reflect missiles. See reflect missiles.
		</td>
	</tr>
	<tr>
		<td>can reflect spells</td>
		<td>@ref obj::can_reflect_spell</td>
		<td>  object CAN reflect spells. See reflect spells.
		</td>
	</tr>
	<tr>
		<td>cursed</td>
		<td>@ref FLAG_CURSED</td>
		<td>    The item is cursed. This object can't be removed when
    wielded or worn (without uncurse it). Remove curse will
    remove this flag.
		</td>
	</tr>
	<tr>
		<td>description</td>
		<td>@ref obj::msg</td>
		<td>    This text may describe the object.
		</td>
	</tr>
	<tr>
		<td>ethereal can pass</td>
		<td>@ref obj::pass_thru</td>
		<td>    If no_pass (blocking passage) is set, no one can pass. If this
    flag is set too, ethereal objects with the CAN_PASS_THRU flag can
    pass. This is used for example from ghosts who moves through doors.
		</td>
	</tr>
	<tr>
		<td>glow radius</td>
		<td>@ref obj::glow_radius</td>
		<td>    If &lt;glow radius&gt; is set to a value greater zero, the object
    appears lit up on dark maps. &lt;glow radius&gt; can be a value
    between 0 and 4, the higher, the more light does the object emmit.
		</td>
	</tr>
	<tr>
		<td>hilly terrain</td>
		<td>@ref FLAG_IS_HILLY</td>
		<td>    This flag indicates this spot contains hills or large rocks.
    Players with activated mountaineer skill can move faster here.
		</td>
	</tr>
	<tr>
		<td>identified</td>
		<td>@ref FLAG_IDENTIFIED</td>
		<td>    If an item is identified, the player has
    full knowledge about it.
		</td>
	</tr>
	<tr>
		<td>image</td>
		<td>@ref obj::face</td>
		<td>    The image-name defines what image is displayed for this object
    in-game.
		</td>
	</tr>
	<tr>
		<td>inv. system object</td>
		<td>@ref obj::sys_object</td>
		<td>    Marks an object as system object. System objects are ALWAYS invisible and
    hidden from the players. They can't be seen or detected and never will send
    any information about them to the players client. System objects are put
    in layer 0 under the floor tiles.
		</td>
	</tr>
	<tr>
		<td>invisible</td>
		<td>@ref obj::is_invisible</td>
		<td>    Generally makes the object invisible. Invisible objects will be shown
    if the player has "see invisible" (from spell or item). To hide objects
    totally from detection, use "sys_object".
		</td>
	</tr>
	<tr>
		<td>is animated</td>
		<td>@ref FLAG_ANIMATE</td>
		<td>  If set, the object is animated and animation is used.
  Note: Some special objects will use a animation NOT as animation but
  as frame list. Examples are buttons (which frames are changed by the
  object status of the button). IS_TURNABLE will enable direction turning
  for some object types. These flags are all "system" related. Be VERY
  careful to change them.
		</td>
	</tr>
	<tr>
		<td>is turnable</td>
		<td>@ref FLAG_IS_TURNABLE</td>
		<td>  System flag. Object can be turned to the directions.
		</td>
	</tr>
	<tr>
		<td>layer</td>
		<td>@ref obj::layer</td>
		<td>    This is the map layer, the object will put in. The selected layer will effect where and
    how this object is shown on client side. Layer 0 is reserved for sys_object type objects
    and will NEVER be shown on client side. Layer 1 is for floor objects and Layer 2 for
    floor masks. Layer 3 and 4 are for items on the ground. Layer 5 is for walls, layer 
    6 is reversed for players and layer 7 is for spell effects and high flying/visible
    objects like arrows.
		</td>
	</tr>
	<tr>
		<td>luminousness</td>
		<td>@ref obj::last_sp</td>
		<td>  This value sets the basic light/darkness value of tile space. This is
  how much this space is naturally glowing (luminousness). This is NOT
  the light source value. This value can be negative (shadow) and is
  direct added to a tile light value.
		</td>
	</tr>
	<tr>
		<td>magical</td>
		<td>@ref obj::is_magical</td>
		<td>    If set, this object count as "magical". Detect magic or
    identify will show this flag and the player will see a small
    M in the client inventory part.
		</td>
	</tr>
	<tr>
		<td>material</td>
		<td>@ref obj::material_real</td>
		<td>    The material defines the exact material of which the object
    consists. It is much more specific than &lt;material class&gt;,
    however only one material can be selected, not multiple.
    &lt;material&gt; is not required to be set, it can be left 'undefined'.
		</td>
	</tr>
	<tr>
		<td>material class</td>
		<td>@ref obj::material</td>
		<td>    This bitmask-value informs the player of which basic material(s)
    the object consists. Material class does also affect how likely the
    object can be destroyed by hazardous spell-effects.
		</td>
	</tr>
	<tr>
		<td>name</td>
		<td>@ref obj::name</td>
		<td>    This is the name of the object, displayed to the player.
		</td>
	</tr>
	<tr>
		<td>no prayers</td>
		<td>@ref obj::no_cleric</td>
		<td>    If enabled, it is impossible for players to use (cleric-)
    prayers on that spot.
		</td>
	</tr>
	<tr>
		<td>no spells</td>
		<td>@ref FLAG_NO_MAGIC</td>
		<td>    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
		</td>
	</tr>
	<tr>
		<td>no teleport</td>
		<td>@ref obj::no_teleport</td>
		<td>    Marks an object as no teleport object. A no teleport object can't be
    teleported by teleporter except the object is inside the inventory of 
    another object which can be teleported.
		</td>
	</tr>
	<tr>
		<td>non-pickable</td>
		<td>@ref FLAG_NO_PICK</td>
		<td>    If set, the object cannot be picked up (Neither by players nor monsters).
		</td>
	</tr>
	<tr>
		<td>number</td>
		<td>@ref obj::nrof</td>
		<td>    This value determines the number of objects in one stack (for example:
    100 goldcoins =&gt; "number = 100"). You should set this at least to one, for
    any pickable object - otherwise it won't be mergeable into a stack.
		</td>
	</tr>
	<tr>
		<td>one drop</td>
		<td>@ref obj::one_drop</td>
		<td>   In the moment a player gets or apply this items, it will
   flaged as godgiven and vanish when droped to the ground.
		</td>
	</tr>
	<tr>
		<td>permanent cursed</td>
		<td>@ref obj::cursed_perm</td>
		<td>    The item is permanent cursed. If this flag set, applying 
    or unapplying will set "cursed 1" again. This flag can't be
    removed by remove curse.
		</td>
	</tr>
	<tr>
		<td>permanent damned</td>
		<td>@ref obj::damned_perm</td>
		<td>    The item is permanent damned. If this flag set, applying 
    or unapplying will set "damned 1" again. This flag can't be
    removed by remove damnation.
		</td>
	</tr>
	<tr>
		<td>player only</td>
		<td>@ref obj::player_only</td>
		<td>    If set, only players can enter the tile the object with this flag is in too.
		</td>
	</tr>
	<tr>
		<td>quest item</td>
		<td>@ref obj::quest_item</td>
		<td>    Item is a quest item. This item will be inserted in the 
    quest container when a quest is finished and for that player
    this item will never drop again.
		</td>
	</tr>
	<tr>
		<td>slow movement</td>
		<td>@ref obj::slow_move</td>
		<td>    If &lt;slow movement&gt; is set to a value greater zero, all
    creatures moving over this spot will be slower than normal.

    &lt;slow movement&gt; 1  - rough terrain
    &lt;slow movement&gt; 2  - very rough terrain
    ...
    &lt;slow movement&gt; 7  - spider web (sticky as hell)
		</td>
	</tr>
	<tr>
		<td>start speed</td>
		<td>@ref obj::speed_left</td>
		<td>    NOTE: without speed != 0, this value is not used. Only use
    for objects with speed (active objects)!
    When a active object (with 'speed' != 0) is put on a map, this 
    value is used as counter. Every 'tick', 'speed' (if negative,
    value is turned positive before) is added to this value - 
    if it is bigger 0 the object 'will do something' and this counter is 
    decreased with -1.0 .
    As default a normal object will put on the map with start speed 0. 
    It 'will do something' with the next coming 'tick'.
    Setting this value to -1.0 will put it on map but wait one full 
    'lifetime' round until it does something. 
    A 'fire object' should be put on map with start speed 0 - it should
    try to burn something in the moment it comes in the game. A bomb for
    example should be put with speed -1.0 on the map - it will stay then
    on map until the bomb becomes active - it explode.
    The 'lifetime' round is determinated by speed. A speed of 1.0 will
    give a 'lifetime' round of 1 tick - a speed of 0.01 100 ticks.
    Special case: A negative speed value will add to start speed a random
    value between 0.0 to 0.9 . So, a speed of -0.1 with a start speed of
    -1.0 will result in speed 0.1 and start speed between -1.0 and -0.1. 
    This is useful to lets a row of same objects act in different tick ranges.
		</td>
	</tr>
	<tr>
		<td>sub type</td>
		<td>@ref obj::sub_type</td>
		<td>    This important value is used to define "sub types" for objects of the same object
    type. Examples are weapons, which are all from type WEAPON but can be different sub types
    like slash type, cleave type, 1hand, polearms and so on. This value goes to the client
    too. WARNING: not all objects have a sub_type and changing it without care can corrupt
    server AND/OR the clients. Normally this is not a subject to change outside arch definition.
		</td>
	</tr>
	<tr>
		<td>terrain type</td>
		<td>@ref obj::terrain_type</td>
		<td>    The &lt;terrain type&gt; defines what kind of environment exists on
    this tile. This can be anything from normal land (= "none")
    to water, fire etc. Only creatures whith appropriate terrain-
    abilities can pass over this square.
		</td>
	</tr>
	<tr>
		<td>title</td>
		<td>@ref obj::title</td>
		<td>    This is the object's title. Once an object is identified the title is
    attached to the name. Typical titels are "of mostrai", "of xray vision" etc.
		</td>
	</tr>
	<tr>
		<td>unique map</td>
		<td>@ref FLAG_UNIQUE</td>
		<td>    Unique floor means that any items dropped on that spot
    will be saved byond map reset. For permanent apartments,
    all floor tiles must be set &lt;unique map&gt;.
		</td>
	</tr>
	<tr>
		<td>unpaid</td>
		<td>@ref FLAG_UNPAID</td>
		<td>    An &lt;unpaid&gt; item cannot be used unless a player carried it over
    a shop mat, paying the demanded price. Setting this flag makes sense
    only for pickable items inside shops.
		</td>
	</tr>
	<tr>
		<td>value</td>
		<td>@ref obj::value</td>
		<td>    Adds a certain value to the object: It will be worth that many times the
    default value from it's archetype (E.g. "value = 3" means three times
    worth the default value). Value for buying/selling will be
    further modified by various factors. Hence, testing values in-game is
    usually inevitable.
		</td>
	</tr>
	<tr>
		<td>weight</td>
		<td>@ref obj::weight</td>
		<td>    This value defines the object's weight in gramm (1000g is 1kg). Objects with
    zero weight are not pickable for players. Still, set the "non-pickable"-flag
    for explicitly non-pickable objects (hey, this is opensource.. you
    never know ;) ).
		</td>
	</tr>
	<tr>
		<td>wooded terrain</td>
		<td>@ref FLAG_IS_WOODED</td>
		<td>    This flag indicates this spot contains wood or high grass.
    Players with activated woodsman skill can move faster here.
		</td>
	</tr>
</table>
*/
