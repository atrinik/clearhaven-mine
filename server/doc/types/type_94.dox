/**
@var PIT
See @ref page_type_94
*/

/**
@page page_type_94 Pit


@section Description
    Pits are holes, transporting the player when he walks (and falls) into them.
    A speciality about pits is that they don't transport the player to
    the exact destination, but within a two-square radius of the destination
    (never on blocked squares).<br>
    Optionally, pits can get closed and opened, similar to gates.<br><br>
    Monsters and items are affected by pits just as well as players.
    Even multipart monsters can fall through them, given enough space. 



Type defined by:
- @ref object::type = 94


@section Attributes

<table>
	<tr>
		<th>Attribute</th>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>anim speed</td>
		<td>@ref obj::anim_speed</td>
		<td>  How fast to play this animation.
		</td>
	</tr>
	<tr>
		<td>animation</td>
		<td>@ref obj::animation</td>
		<td>    The animation-name defines what animation is displayed for this object
    in-game. Note that a set animation will overrule the face.
    Changing animation is easy - adding or deleting a animation is more
    difficult and should be done in the text parse window and not in this
    dialog.
		</td>
	</tr>
	<tr>
		<td>block view</td>
		<td>@ref FLAG_BLOCKSVIEW</td>
		<td>    If an item is set to block view, players (and monsters) cannot
    see byond it unless they cross it or manage to stand ontop.
		</td>
	</tr>
	<tr>
		<td>can reflect missiles</td>
		<td>@ref FLAG_CAN_REFL_MISSILE</td>
		<td>   object CAN reflect missiles. See reflect missiles.
		</td>
	</tr>
	<tr>
		<td>can reflect spells</td>
		<td>@ref FLAG_CAN_REFL_SPELL</td>
		<td>  object CAN reflect spells. See reflect spells.
		</td>
	</tr>
	<tr>
		<td>connection</td>
		<td>@ref page_connected "connection value"</td>
		<td>    When a &lt;connection&gt; value is set, the pit can be opened/closed
    by activating the connection.
		</td>
	</tr>
	<tr>
		<td>cursed</td>
		<td>@ref FLAG_CURSED</td>
		<td>    The item is cursed. This object can't be removed when
    wielded or worn (without uncurse it). Remove curse will
    remove this flag.
		</td>
	</tr>
	<tr>
		<td>damned</td>
		<td>@ref FLAG_DAMNED</td>
		<td>    Stronger form of curse. Item can't be removed when
    wielded or worn. Remove damnation will remove this flag.
		</td>
	</tr>
	<tr>
		<td>destination X</td>
		<td>@ref liv::hp</td>
		<td>    The pit will transport creatures (and items) randomly into a two-square
    radius of the destination coordinates.
    If the destination square becomes blocked, the pit will act like
    being filled up and not work anymore!
		</td>
	</tr>
	<tr>
		<td>destination Y</td>
		<td>@ref liv::sp</td>
		<td>    The pit will transport creatures (and items) randomly into a two-square
    radius of the destination coordinates.
    If the destination square becomes blocked, the pit will act like
    being filled up and not work anymore!
		</td>
	</tr>
	<tr>
		<td>exit path</td>
		<td>@ref obj::slaying</td>
		<td>    The exit path defines the map that the player is transferred to.
    You can enter an absolute path, beginning with '/' (for example
    "/peterm/FireTemple/fire1"). It can also be a relative path, not beginning
    with '/' (On the map "/peterm/FireTemple/Fire2" for example I could use the
    relative path "Fire1"). Use relative paths whenever possible! Note that
    upper/lower case must always be set correctly. However, please use lower
    case only. 
    It is well possible to have an exit pointing to the same map that the exit
    is on. If slaying is not set in an exit, the player will see a message like
    "the exit is closed".
    If the slaying field is blank, the destination will be the same map.
		</td>
	</tr>
	<tr>
		<td>glow radius</td>
		<td>@ref obj::glow_radius</td>
		<td>    If &lt;glow radius&gt; is set to a value greater zero, the object
    appears lit up on dark maps. &lt;glow radius&gt; can be a value
    between 0 and 4, the higher, the more light does the object emmit.
		</td>
	</tr>
	<tr>
		<td>identified</td>
		<td>@ref FLAG_IDENTIFIED</td>
		<td>    If an item is identified, the player has
    full knowledge about it.
		</td>
	</tr>
	<tr>
		<td>image</td>
		<td>@ref obj::face</td>
		<td>    The image-name defines what image is displayed for this object
    in-game.
		</td>
	</tr>
	<tr>
		<td>inv. system object</td>
		<td>@ref FLAG_SYS_OBJECT</td>
		<td>    Marks an object as system object. System objects are ALWAYS invisible and
    hidden from the players. They can't be seen or detected and never will send
    any information about them to the players client. System objects are put
    in layer 0 under the floor tiles.
		</td>
	</tr>
	<tr>
		<td>invisible</td>
		<td>@ref FLAG_IS_INVISIBLE</td>
		<td>    Generally makes the object invisible. Invisible objects will be shown
    if the player has "see invisible" (from spell or item). To hide objects
    totally from detection, use "sys_object".
		</td>
	</tr>
	<tr>
		<td>is animated</td>
		<td>@ref FLAG_ANIMATE</td>
		<td>  If set, the object is animated and animation is used.
  Note: Some special objects will use a animation NOT as animation but
  as frame list. Examples are buttons (which frames are changed by the
  object status of the button). IS_TURNABLE will enable direction turning
  for some object types. These flags are all "system" related. Be VERY
  careful to change them.
		</td>
	</tr>
	<tr>
		<td>is turnable</td>
		<td>@ref FLAG_IS_TURNABLE</td>
		<td>  System flag. Object can be turned to the directions.
		</td>
	</tr>
	<tr>
		<td>layer</td>
		<td>@ref obj::layer</td>
		<td>    This is the map layer, the object will put in. The selected layer will effect where and
    how this object is shown on client side. Layer 0 is reserved for sys_object type objects
    and will NEVER be shown on client side. Layer 1 is for floor objects and Layer 2 for
    floor masks. Layer 3 and 4 are for items on the ground. Layer 5 is for walls, layer 
    6 is reversed for players and layer 7 is for spell effects and high flying/visible
    objects like arrows.
		</td>
	</tr>
	<tr>
		<td>magical</td>
		<td>@ref FLAG_IS_MAGICAL</td>
		<td>    If set, this object count as "magical". Detect magic or
    identify will show this flag and the player will see a small
    M in the client inventory part.
		</td>
	</tr>
	<tr>
		<td>material</td>
		<td>@ref obj::material_real</td>
		<td>    The material defines the exact material of which the object
    consists. It is much more specific than &lt;material class&gt;,
    however only one material can be selected, not multiple.
    &lt;material&gt; is not required to be set, it can be left 'undefined'.
		</td>
	</tr>
	<tr>
		<td>material class</td>
		<td>@ref obj::material</td>
		<td>    This bitmask-value informs the player of which basic material(s)
    the object consists. Material class does also affect how likely the
    object can be destroyed by hazardous spell-effects.
		</td>
	</tr>
	<tr>
		<td>name</td>
		<td>@ref obj::name</td>
		<td>    This is the name of the object, displayed to the player.
		</td>
	</tr>
	<tr>
		<td>no prayers</td>
		<td>@ref FLAG_NO_CLERIC</td>
		<td>    If enabled, it is impossible for players to use (cleric-)
    prayers on that spot.
		</td>
	</tr>
	<tr>
		<td>no spells</td>
		<td>@ref FLAG_NO_MAGIC</td>
		<td>    If enabled, it is impossible for players to use (wizard-)
    spells on that spot.
		</td>
	</tr>
	<tr>
		<td>no teleport</td>
		<td>@ref FLAG_NO_TELEPORT</td>
		<td>    Marks an object as no teleport object. A no teleport object can't be
    teleported by teleporter except the object is inside the inventory of 
    another object which can be teleported.
		</td>
	</tr>
	<tr>
		<td>non-pickable</td>
		<td>@ref FLAG_NO_PICK</td>
		<td>    If set, the object cannot be picked up (Neither by players nor monsters).
		</td>
	</tr>
	<tr>
		<td>number</td>
		<td>@ref obj::nrof</td>
		<td>    This value determines the number of objects in one stack (for example:
    100 goldcoins =&gt; "number = 100"). You should set this at least to one, for
    any pickable object - otherwise it won't be mergeable into a stack.
		</td>
	</tr>
	<tr>
		<td>one drop</td>
		<td>@ref FLAG_ONE_DROP</td>
		<td>   In the moment a player gets or apply this items, it will
   flaged as godgiven and vanish when droped to the ground.
		</td>
	</tr>
	<tr>
		<td>permanent cursed</td>
		<td>@ref FLAG_PERM_CURSED</td>
		<td>    The item is permanent cursed. If this flag set, applying 
    or unapplying will set "cursed 1" again. This flag can't be
    removed by remove curse.
		</td>
	</tr>
	<tr>
		<td>permanent damned</td>
		<td>@ref FLAG_PERM_DAMNED</td>
		<td>    The item is permanent damned. If this flag set, applying 
    or unapplying will set "damned 1" again. This flag can't be
    removed by remove damnation.
		</td>
	</tr>
	<tr>
		<td>player only</td>
		<td>@ref FLAG_PLAYER_ONLY</td>
		<td>    If set, only players can enter the tile the object with this flag is in too.
		</td>
	</tr>
	<tr>
		<td>position state</td>
		<td>@ref liv::wc</td>
		<td>    The &lt;position state&gt; defines the position of the gate:
    Zero means completely open/down, the "number of animation-steps" (usually
    about 6 or 7) means completely closed/up state. I suggest you don't
    mess with this value - Leave the default in place.
		</td>
	</tr>
	<tr>
		<td>quest item</td>
		<td>@ref FLAG_QUEST_ITEM</td>
		<td>    Item is a quest item. This item will be inserted in the 
    quest container when a quest is finished and for that player
    this item will never drop again.
		</td>
	</tr>
	<tr>
		<td>start speed</td>
		<td>@ref obj::speed_left</td>
		<td>    NOTE: without speed != 0, this value is not used. Only use
    for objects with speed (active objects)!
    When a active object (with 'speed' != 0) is put on a map, this 
    value is used as counter. Every 'tick', 'speed' (if negative,
    value is turned positive before) is added to this value - 
    if it is bigger 0 the object 'will do something' and this counter is 
    decreased with -1.0 .
    As default a normal object will put on the map with start speed 0. 
    It 'will do something' with the next coming 'tick'.
    Setting this value to -1.0 will put it on map but wait one full 
    'lifetime' round until it does something. 
    A 'fire object' should be put on map with start speed 0 - it should
    try to burn something in the moment it comes in the game. A bomb for
    example should be put with speed -1.0 on the map - it will stay then
    on map until the bomb becomes active - it explode.
    The 'lifetime' round is determinated by speed. A speed of 1.0 will
    give a 'lifetime' round of 1 tick - a speed of 0.01 100 ticks.
    Special case: A negative speed value will add to start speed a random
    value between 0.0 to 0.9 . So, a speed of -0.1 with a start speed of
    -1.0 will result in speed 0.1 and start speed between -1.0 and -0.1. 
    This is useful to lets a row of same objects act in different tick ranges.
		</td>
	</tr>
	<tr>
		<td>sub type</td>
		<td>@ref obj::sub_type</td>
		<td>    This important value is used to define "sub types" for objects of the same object
    type. Examples are weapons, which are all from type WEAPON but can be different sub types
    like slash type, cleave type, 1hand, polearms and so on. This value goes to the client
    too. WARNING: not all objects have a sub_type and changing it without care can corrupt
    server AND/OR the clients. Normally this is not a subject to change outside arch definition.
		</td>
	</tr>
	<tr>
		<td>swallow flying</td>
		<td>@ref FLAG_FLY_ON</td>
		<td>    If set, all flying creatures will fall into the pit as well.
    This is not the behaviour expected from a pit, and it should
    only be used for map-mechanisms (e.g. for transporting flying
    monsters).
    An interesting side-effect: If this flag is enabled, spell
    effects like fire/snow also make their way through the pit.
		</td>
	</tr>
	<tr>
		<td>swallow walking</td>
		<td>@ref FLAG_WALK_ON</td>
		<td>    If set, all walking creatures will fall into the pit.
    This does NOT need to be set for closed pits!
		</td>
	</tr>
	<tr>
		<td>title</td>
		<td>@ref obj::title</td>
		<td>    This is the object's title. Once an object is identified the title is
    attached to the name. Typical titels are "of mostrai", "of xray vision" etc.
		</td>
	</tr>
	<tr>
		<td>transfer flag</td>
		<td>@ref obj::last_sp</td>
		<td>    If the transfer flag is set, the destination values are used in a
    special way - instead of marking a fixed position, they are used to
    define a "drop area" where the player drops randomly.
		</td>
	</tr>
	<tr>
		<td>unpaid</td>
		<td>@ref FLAG_UNPAID</td>
		<td>    An &lt;unpaid&gt; item cannot be used unless a player carried it over
    a shop mat, paying the demanded price. Setting this flag makes sense
    only for pickable items inside shops.
		</td>
	</tr>
	<tr>
		<td>value</td>
		<td>@ref obj::value</td>
		<td>    Adds a certain value to the object: It will be worth that many times the
    default value from it's archetype (E.g. "value = 3" means three times
    worth the default value). Value for buying/selling will be
    further modified by various factors. Hence, testing values in-game is
    usually inevitable.
		</td>
	</tr>
	<tr>
		<td>weight</td>
		<td>@ref obj::weight</td>
		<td>    This value defines the object's weight in gramm (1000g is 1kg). Objects with
    zero weight are not pickable for players. Still, set the "non-pickable"-flag
    for explicitly non-pickable objects (hey, this is opensource.. you
    never know ;) ).
		</td>
	</tr>
</table>
*/
